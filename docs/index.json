{
  "api/AccountService.Controllers.AccountsController.html": {
    "href": "api/AccountService.Controllers.AccountsController.html",
    "title": "Class AccountsController | mysite",
    "summary": "Class AccountsController Namespace AccountService.Controllers Assembly AccountService.dll [ApiController] [Route(\"api/[controller]\")] public class AccountsController : ControllerBase Inheritance object ControllerBase AccountsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountsController(IAccountService) public AccountsController(IAccountService service) Parameters service IAccountService Methods CreateAccount(CreateAccountDto) [HttpPost] public Task<IActionResult> CreateAccount(CreateAccountDto dto) Parameters dto CreateAccountDto Returns Task<IActionResult> DeleteAccount(string) [HttpDelete(\"{id}\")] public Task<IActionResult> DeleteAccount(string id) Parameters id string Returns Task<IActionResult> GetAccount(string) [HttpGet(\"{id}\")] public Task<IActionResult> GetAccount(string id) Parameters id string Returns Task<IActionResult> GetAllAccounts() [HttpGet] public Task<IActionResult> GetAllAccounts() Returns Task<IActionResult> UpdateAccount(string, UpdateAccountDto) [HttpPut(\"{id}\")] public Task<IActionResult> UpdateAccount(string id, UpdateAccountDto dto) Parameters id string dto UpdateAccountDto Returns Task<IActionResult>"
  },
  "api/AccountService.Controllers.html": {
    "href": "api/AccountService.Controllers.html",
    "title": "Namespace AccountService.Controllers | mysite",
    "summary": "Namespace AccountService.Controllers Classes AccountsController"
  },
  "api/AccountService.DTOs.AccountDto.html": {
    "href": "api/AccountService.DTOs.AccountDto.html",
    "title": "Class AccountDto | mysite",
    "summary": "Class AccountDto Namespace AccountService.DTOs Assembly AccountService.dll public class AccountDto Inheritance object AccountDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountNumber public string AccountNumber { get; set; } Property Value string AccountType public string AccountType { get; set; } Property Value string Balance public decimal Balance { get; set; } Property Value decimal Id public string Id { get; set; } Property Value string"
  },
  "api/AccountService.DTOs.CreateAccountDto.html": {
    "href": "api/AccountService.DTOs.CreateAccountDto.html",
    "title": "Class CreateAccountDto | mysite",
    "summary": "Class CreateAccountDto Namespace AccountService.DTOs Assembly AccountService.dll public class CreateAccountDto Inheritance object CreateAccountDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountType public string AccountType { get; set; } Property Value string CustomerId public string CustomerId { get; set; } Property Value string"
  },
  "api/AccountService.DTOs.UpdateAccountDto.html": {
    "href": "api/AccountService.DTOs.UpdateAccountDto.html",
    "title": "Class UpdateAccountDto | mysite",
    "summary": "Class UpdateAccountDto Namespace AccountService.DTOs Assembly AccountService.dll public class UpdateAccountDto Inheritance object UpdateAccountDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountType public string? AccountType { get; set; } Property Value string Balance public decimal? Balance { get; set; } Property Value decimal?"
  },
  "api/AccountService.DTOs.html": {
    "href": "api/AccountService.DTOs.html",
    "title": "Namespace AccountService.DTOs | mysite",
    "summary": "Namespace AccountService.DTOs Classes AccountDto CreateAccountDto UpdateAccountDto"
  },
  "api/AccountService.Data.ApplicationDbContext.html": {
    "href": "api/AccountService.Data.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | mysite",
    "summary": "Class ApplicationDbContext Namespace AccountService.Data Assembly AccountService.dll public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Properties Accounts public DbSet<Account> Accounts { get; } Property Value DbSet<Account> Customers public DbSet<Customer> Customers { get; } Property Value DbSet<Customer> Transactions public DbSet<Transaction> Transactions { get; } Property Value DbSet<Transaction> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/AccountService.Data.html": {
    "href": "api/AccountService.Data.html",
    "title": "Namespace AccountService.Data | mysite",
    "summary": "Namespace AccountService.Data Classes ApplicationDbContext"
  },
  "api/AccountService.Models.Account.html": {
    "href": "api/AccountService.Models.Account.html",
    "title": "Class Account | mysite",
    "summary": "Class Account Namespace AccountService.Models Assembly AccountService.dll [Table(\"accounts\")] public class Account Inheritance object Account Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountNumber [Column(\"account_number\")] public string AccountNumber { get; set; } Property Value string AccountType [Column(\"account_type\")] public string AccountType { get; set; } Property Value string Balance [Column(\"balance\")] public decimal Balance { get; set; } Property Value decimal CreatedAt [Column(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Customer [ForeignKey(\"CustomerId\")] [InverseProperty(\"Accounts\")] public Customer Customer { get; set; } Property Value Customer CustomerId [Column(\"customer_id\")] public string CustomerId { get; set; } Property Value string Id [Key] [Column(\"id\")] public string Id { get; set; } Property Value string IncomingTransactions [InverseProperty(\"ToAccount\")] public List<Transaction> IncomingTransactions { get; set; } Property Value List<Transaction> OutgoingTransactions [InverseProperty(\"FromAccount\")] public List<Transaction> OutgoingTransactions { get; set; } Property Value List<Transaction>"
  },
  "api/AccountService.Models.Customer.html": {
    "href": "api/AccountService.Models.Customer.html",
    "title": "Class Customer | mysite",
    "summary": "Class Customer Namespace AccountService.Models Assembly AccountService.dll [Table(\"customers\")] public class Customer Inheritance object Customer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Accounts [InverseProperty(\"Customer\")] public List<Account> Accounts { get; set; } Property Value List<Account> Email [Column(\"email\")] public string Email { get; set; } Property Value string Id [Key] [Column(\"id\")] public string Id { get; set; } Property Value string Name [Column(\"name\")] public string Name { get; set; } Property Value string"
  },
  "api/AccountService.Models.Transaction.html": {
    "href": "api/AccountService.Models.Transaction.html",
    "title": "Class Transaction | mysite",
    "summary": "Class Transaction Namespace AccountService.Models Assembly AccountService.dll [Table(\"transactions\")] public class Transaction Inheritance object Transaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount [Column(\"amount\")] public decimal Amount { get; set; } Property Value decimal FromAccount [ForeignKey(\"FromAccountId\")] [InverseProperty(\"OutgoingTransactions\")] public Account FromAccount { get; set; } Property Value Account FromAccountId [Column(\"from_account_id\")] public string FromAccountId { get; set; } Property Value string Id [Key] [Column(\"id\")] public string Id { get; set; } Property Value string Timestamp [Column(\"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime ToAccount [ForeignKey(\"ToAccountId\")] [InverseProperty(\"IncomingTransactions\")] public Account ToAccount { get; set; } Property Value Account ToAccountId [Column(\"to_account_id\")] public string ToAccountId { get; set; } Property Value string"
  },
  "api/AccountService.Models.html": {
    "href": "api/AccountService.Models.html",
    "title": "Namespace AccountService.Models | mysite",
    "summary": "Namespace AccountService.Models Classes Account Customer Transaction"
  },
  "api/AccountService.Repositories.AccountRepository.html": {
    "href": "api/AccountService.Repositories.AccountRepository.html",
    "title": "Class AccountRepository | mysite",
    "summary": "Class AccountRepository Namespace AccountService.Repositories Assembly AccountService.dll public class AccountRepository : IAccountRepository Inheritance object AccountRepository Implements IAccountRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountRepository(ApplicationDbContext) public AccountRepository(ApplicationDbContext context) Parameters context ApplicationDbContext Methods CreateAsync(Account) public Task<Account> CreateAsync(Account account) Parameters account Account Returns Task<Account> GetAllAsync() public Task<IEnumerable<Account>> GetAllAsync() Returns Task<IEnumerable<Account>> GetByIdAsync(string) public Task<Account?> GetByIdAsync(string id) Parameters id string Returns Task<Account>"
  },
  "api/AccountService.Repositories.IAccountRepository.html": {
    "href": "api/AccountService.Repositories.IAccountRepository.html",
    "title": "Interface IAccountRepository | mysite",
    "summary": "Interface IAccountRepository Namespace AccountService.Repositories Assembly AccountService.dll public interface IAccountRepository Methods CreateAsync(Account) Task<Account> CreateAsync(Account account) Parameters account Account Returns Task<Account> GetAllAsync() Task<IEnumerable<Account>> GetAllAsync() Returns Task<IEnumerable<Account>> GetByIdAsync(string) Task<Account?> GetByIdAsync(string id) Parameters id string Returns Task<Account>"
  },
  "api/AccountService.Repositories.html": {
    "href": "api/AccountService.Repositories.html",
    "title": "Namespace AccountService.Repositories | mysite",
    "summary": "Namespace AccountService.Repositories Classes AccountRepository Interfaces IAccountRepository"
  },
  "api/AccountService.Services.AccountService.html": {
    "href": "api/AccountService.Services.AccountService.html",
    "title": "Class AccountService | mysite",
    "summary": "Class AccountService Namespace AccountService.Services Assembly AccountService.dll public class AccountService : IAccountService Inheritance object AccountService Implements IAccountService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountService(IAccountRepository) public AccountService(IAccountRepository repository) Parameters repository IAccountRepository Methods CreateAccountAsync(CreateAccountDto) public Task<AccountDto> CreateAccountAsync(CreateAccountDto dto) Parameters dto CreateAccountDto Returns Task<AccountDto> DeleteAccountAsync(string) public Task<bool> DeleteAccountAsync(string id) Parameters id string Returns Task<bool> GetAccountAsync(string) public Task<AccountDto?> GetAccountAsync(string id) Parameters id string Returns Task<AccountDto> GetAllAccountsAsync() public Task<IEnumerable<AccountDto>> GetAllAccountsAsync() Returns Task<IEnumerable<AccountDto>> UpdateAccountAsync(string, UpdateAccountDto) public Task<AccountDto?> UpdateAccountAsync(string id, UpdateAccountDto dto) Parameters id string dto UpdateAccountDto Returns Task<AccountDto>"
  },
  "api/AccountService.Services.IAccountService.html": {
    "href": "api/AccountService.Services.IAccountService.html",
    "title": "Interface IAccountService | mysite",
    "summary": "Interface IAccountService Namespace AccountService.Services Assembly AccountService.dll public interface IAccountService Methods CreateAccountAsync(CreateAccountDto) Task<AccountDto> CreateAccountAsync(CreateAccountDto dto) Parameters dto CreateAccountDto Returns Task<AccountDto> DeleteAccountAsync(string) Task<bool> DeleteAccountAsync(string id) Parameters id string Returns Task<bool> GetAccountAsync(string) Task<AccountDto?> GetAccountAsync(string id) Parameters id string Returns Task<AccountDto> GetAllAccountsAsync() Task<IEnumerable<AccountDto>> GetAllAccountsAsync() Returns Task<IEnumerable<AccountDto>> UpdateAccountAsync(string, UpdateAccountDto) Task<AccountDto?> UpdateAccountAsync(string id, UpdateAccountDto dto) Parameters id string dto UpdateAccountDto Returns Task<AccountDto>"
  },
  "api/AccountService.Services.html": {
    "href": "api/AccountService.Services.html",
    "title": "Namespace AccountService.Services | mysite",
    "summary": "Namespace AccountService.Services Classes AccountService Interfaces IAccountService"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | mysite",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | mysite",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}